package com.isoftstone.huidingc.testqmui.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isoftstone.huidingc.testqmui.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property RealName = new Property(4, String.class, "realName", false, "REAL_NAME");
        public final static Property ActiveTime = new Property(5, String.class, "activeTime", false, "ACTIVE_TIME");
        public final static Property UserStatus = new Property(6, String.class, "userStatus", false, "USER_STATUS");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Duty = new Property(8, String.class, "duty", false, "DUTY");
        public final static Property Branch = new Property(9, String.class, "branch", false, "BRANCH");
        public final static Property Sex = new Property(10, String.class, "sex", false, "SEX");
        public final static Property Eamil = new Property(11, String.class, "eamil", false, "EAMIL");
        public final static Property JionTime = new Property(12, String.class, "jionTime", false, "JION_TIME");
        public final static Property Integral = new Property(13, String.class, "integral", false, "INTEGRAL");
        public final static Property TotalIntegral = new Property(14, String.class, "totalIntegral", false, "TOTAL_INTEGRAL");
        public final static Property Unit = new Property(15, String.class, "unit", false, "UNIT");
        public final static Property Role = new Property(16, int.class, "role", false, "ROLE");
        public final static Property Img = new Property(17, String.class, "img", false, "IMG");
        public final static Property Relation = new Property(18, String.class, "relation", false, "RELATION");
        public final static Property Uid = new Property(19, String.class, "uid", false, "UID");
        public final static Property Token = new Property(20, String.class, "token", false, "TOKEN");
        public final static Property BraPm = new Property(21, String.class, "braPm", false, "BRA_PM");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"REAL_NAME\" TEXT," + // 4: realName
                "\"ACTIVE_TIME\" TEXT," + // 5: activeTime
                "\"USER_STATUS\" TEXT," + // 6: userStatus
                "\"PHONE\" TEXT," + // 7: phone
                "\"DUTY\" TEXT," + // 8: duty
                "\"BRANCH\" TEXT," + // 9: branch
                "\"SEX\" TEXT," + // 10: sex
                "\"EAMIL\" TEXT," + // 11: eamil
                "\"JION_TIME\" TEXT," + // 12: jionTime
                "\"INTEGRAL\" TEXT," + // 13: integral
                "\"TOTAL_INTEGRAL\" TEXT," + // 14: totalIntegral
                "\"UNIT\" TEXT," + // 15: unit
                "\"ROLE\" INTEGER NOT NULL ," + // 16: role
                "\"IMG\" TEXT," + // 17: img
                "\"RELATION\" TEXT," + // 18: relation
                "\"UID\" TEXT," + // 19: uid
                "\"TOKEN\" TEXT," + // 20: token
                "\"BRA_PM\" TEXT);"); // 21: braPm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(5, realName);
        }
 
        String activeTime = entity.getActiveTime();
        if (activeTime != null) {
            stmt.bindString(6, activeTime);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(7, userStatus);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(9, duty);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(10, branch);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(11, sex);
        }
 
        String eamil = entity.getEamil();
        if (eamil != null) {
            stmt.bindString(12, eamil);
        }
 
        String jionTime = entity.getJionTime();
        if (jionTime != null) {
            stmt.bindString(13, jionTime);
        }
 
        String integral = entity.getIntegral();
        if (integral != null) {
            stmt.bindString(14, integral);
        }
 
        String totalIntegral = entity.getTotalIntegral();
        if (totalIntegral != null) {
            stmt.bindString(15, totalIntegral);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(16, unit);
        }
        stmt.bindLong(17, entity.getRole());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(18, img);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(19, relation);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(20, uid);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(21, token);
        }
 
        String braPm = entity.getBraPm();
        if (braPm != null) {
            stmt.bindString(22, braPm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(5, realName);
        }
 
        String activeTime = entity.getActiveTime();
        if (activeTime != null) {
            stmt.bindString(6, activeTime);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(7, userStatus);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(9, duty);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(10, branch);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(11, sex);
        }
 
        String eamil = entity.getEamil();
        if (eamil != null) {
            stmt.bindString(12, eamil);
        }
 
        String jionTime = entity.getJionTime();
        if (jionTime != null) {
            stmt.bindString(13, jionTime);
        }
 
        String integral = entity.getIntegral();
        if (integral != null) {
            stmt.bindString(14, integral);
        }
 
        String totalIntegral = entity.getTotalIntegral();
        if (totalIntegral != null) {
            stmt.bindString(15, totalIntegral);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(16, unit);
        }
        stmt.bindLong(17, entity.getRole());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(18, img);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(19, relation);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(20, uid);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(21, token);
        }
 
        String braPm = entity.getBraPm();
        if (braPm != null) {
            stmt.bindString(22, braPm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // realName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // activeTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // duty
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // branch
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sex
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // eamil
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // jionTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // integral
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // totalIntegral
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // unit
            cursor.getInt(offset + 16), // role
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // img
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // relation
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // uid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // token
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // braPm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setActiveTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDuty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBranch(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSex(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEamil(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setJionTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIntegral(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTotalIntegral(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUnit(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRole(cursor.getInt(offset + 16));
        entity.setImg(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRelation(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setToken(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBraPm(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
